{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightControllersService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `flightControllersGet()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightControllersGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightControllersGet$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightControllersService.FlightControllersGetPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightControllersGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightControllersGet$Plain(params, context) {\n    return this.flightControllersGet$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightControllersGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightControllersGet$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, FlightControllersService.FlightControllersGetPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightControllersGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  flightControllersGet(params, context) {\n    return this.flightControllersGet$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightControllersService.FlightControllersGetPath = '/FlightControllers';\nFlightControllersService.ɵfac = function FlightControllersService_Factory(t) {\n  return new (t || FlightControllersService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightControllersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightControllersService,\n  factory: FlightControllersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAG5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;;;;AAKnD,OAAM,MAAOC,wBAAyB,SAAQF,WAAW;EACvDG,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,mCAAmC,CACjCC,MACC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,wBAAwB,CAACS,wBAAwB,EAAE,KAAK,CAAC;IACrG,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CACtBH,EAAE,CAACI,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,YAAY;MAAEP;IAAO,CAAE,CAAC,CAClE,CAACQ,IAAI,CACJlB,MAAM,CAAEmB,CAAM,IAA6BA,CAAC,YAAYpB,YAAY,CAAC,EACrEE,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAOA,CAAwC;IACjD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,0BAA0B,CACxBX,MACC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACF,mCAAmC,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACQ,IAAI,CACnEjB,GAAG,CAAEkB,CAAsC,IAAsBA,CAAC,CAACE,IAAI,CAAC,CACzE;EACH;EAEA;;;;;;EAMAC,6BAA6B,CAC3Bb,MACC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,wBAAwB,CAACS,wBAAwB,EAAE,KAAK,CAAC;IACrG,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CACtBH,EAAE,CAACI,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,WAAW;MAAEP;IAAO,CAAE,CAAC,CACjE,CAACQ,IAAI,CACJlB,MAAM,CAAEmB,CAAM,IAA6BA,CAAC,YAAYpB,YAAY,CAAC,EACrEE,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAOA,CAAwC;IACjD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAI,oBAAoB,CAClBd,MACC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACY,6BAA6B,CAACb,MAAM,EAAEC,OAAO,CAAC,CAACQ,IAAI,CAC7DjB,GAAG,CAAEkB,CAAsC,IAAsBA,CAAC,CAACE,IAAI,CAAC,CACzE;EACH;;AAxFWjB,wBAAyB,CAMpBS,wBAAwB,GAAG,oBAAoB;AANpDT,wBAAyB;mBAAzBA,wBAAwB;AAAA;AAAxBA,wBAAyB;SAAzBA,wBAAwB;EAAAoB,SAAxBpB,wBAAwB;EAAAqB,YADX;AAAM","names":["HttpResponse","filter","map","BaseService","RequestBuilder","FlightControllersService","constructor","config","http","flightControllersGet$Plain$Response","params","context","rb","rootUrl","FlightControllersGetPath","request","build","responseType","accept","pipe","r","flightControllersGet$Plain","body","flightControllersGet$Response","flightControllersGet","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\sami\\source\\repos\\Flight2\\ClientApp\\src\\app\\api\\services\\flight-controller-service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { FlightRm } from '../models/flight-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightControllersService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `flightControllersGet()` */\r\n  static readonly FlightControllersGetPath = '/FlightControllers';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightControllersGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightControllersGet$Plain$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightControllersService.FlightControllersGetPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightControllersGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightControllersGet$Plain(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<FlightRm>> {\r\n    return this.flightControllersGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `flightControllersGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightControllersGet$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<FlightRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, FlightControllersService.FlightControllersGetPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<FlightRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `flightControllersGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  flightControllersGet(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<FlightRm>> {\r\n    return this.flightControllersGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FlightRm>>): Array<FlightRm> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}